from pyramid.view import view_config

from .routines import (
    get_similar_product_names,
    get_similar_product_versions,
    get_similar_vendor_names,
    load_cve)


CVE = load_cve()
MINIMUM_SIMILARITY = 80
MAXIMUM_COUNT = 10


@view_config(
    route_name='vendor_names.json',
    renderer='json',
    request_method='GET')
def get_vendor_names_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    if not vendor_name:
        return []
    component_type = '*' if asset_type_id == 'X' else 'h'
    return get_similar_vendor_names(
        CVE, component_type, vendor_name, MINIMUM_SIMILARITY,
        MAXIMUM_COUNT)


@view_config(
    route_name='product_names.json',
    renderer='json',
    request_method='GET')
def get_product_names_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    product_name = params.get('productName', '').strip()
    component_type = '*' if asset_type_id == 'X' else 'h'
    return get_similar_product_names(
        CVE, component_type, vendor_name, product_name,
        MINIMUM_SIMILARITY, MAXIMUM_COUNT)


@view_config(
    route_name='product_versions.json',
    renderer='json',
    request_method='GET')
def get_product_versions_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    product_name = params.get('productName', '').strip()
    product_version = params.get('productVersion', '').strip()
    component_type = '*' if asset_type_id == 'X' else 'h'
    return get_similar_product_versions(
        CVE, component_type, vendor_name, product_name,
        product_version, MINIMUM_SIMILARITY, MAXIMUM_COUNT)


@view_config(
    route_name='vulnerabilities.json',
    renderer='json',
    request_method='GET')
def get_vulnerabilities_json(request):
    pass
