from asset_tracker.models import Asset
from pyramid.view import view_config

from .routines import (
    get_similar_product_names,
    get_similar_product_versions,
    get_similar_vendor_names,
    get_vulnerable_assets_database,
    load_cve)
from .settings import (
    MAXIMUM_COUNT,
    MINIMUM_SIMILARITY)


CVE = load_cve()


@view_config(
    route_name='vendor_names.json',
    renderer='json',
    request_method='GET')
def get_vendor_names_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    if not vendor_name:
        return []
    component_type = '*' if asset_type_id[0] == 'X' else 'h'
    return get_similar_vendor_names(
        CVE, component_type, vendor_name, MINIMUM_SIMILARITY,
        MAXIMUM_COUNT)


@view_config(
    route_name='product_names.json',
    renderer='json',
    request_method='GET')
def get_product_names_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    product_name = params.get('productName', '').strip()
    component_type = '*' if asset_type_id[0] == 'X' else 'h'
    return get_similar_product_names(
        CVE, component_type, vendor_name, product_name,
        MINIMUM_SIMILARITY, MAXIMUM_COUNT)


@view_config(
    route_name='product_versions.json',
    renderer='json',
    request_method='GET')
def get_product_versions_json(request):
    params = request.params
    asset_type_id = params.get('typeId', 'X')
    vendor_name = params.get('vendorName', '').strip()
    product_name = params.get('productName', '').strip()
    product_version = params.get('productVersion', '').strip()
    component_type = '*' if asset_type_id[0] == 'X' else 'h'
    return get_similar_product_versions(
        CVE, component_type, vendor_name, product_name,
        product_version, MINIMUM_SIMILARITY, MAXIMUM_COUNT)


@view_config(
    route_name='vulnerabilities.json',
    renderer='json',
    request_method='GET')
def get_vulnerabilities_json(request):
    db = request.db
    # !!! Limit to asset ids that the user has permission to view
    asset_ids = [_[0] for _ in db.query(Asset.id).all()]
    vulnerable_assets_database = get_vulnerable_assets_database()
    results = vulnerable_assets_database.find({
        'id': {'$in': list(asset_ids)},
    }, {
        '_id': 0,
        'id': 1,
        'name': 1,
        'meterCount': 1,
        'vulnerabilities': 1,
    })
    vulnerabilities = []
    for result in results:
        asset_id = result['id']
        asset_name = result['name']
        meter_count = result['meterCount']
        for vulnerability in result['vulnerabilities']:
            impact = vulnerability['impact']
            texts = vulnerability['texts']
            vulnerabilities.append({
                'id': asset_id,
                'name': asset_name,
                'meterCount': meter_count,
                'threat': impact * meter_count,
                'description': '\n'.join(texts),
                'url': vulnerability['url'],
                'date': vulnerability['date'].strftime('%Y%m%d'),
            })
    return vulnerabilities
