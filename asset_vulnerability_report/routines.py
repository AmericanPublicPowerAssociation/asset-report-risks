import pickle
from fuzzywuzzy.process import extract as extract_matches
from pymongo import MongoClient

from .settings import CVE_PATH


def get_nvd_database():
    mongo_client = MongoClient()
    vulnerability_database = mongo_client['vulnerability']
    return vulnerability_database['nvd']


def save_cve(cve):
    return pickle.dump(cve, open(CVE_PATH, 'wb'), protocol=-1)


def load_cve():
    return pickle.load(open(CVE_PATH, 'rb'))


def select_matches(target_text, source_texts, minimum_score, maximum_count):
    matches = sorted(extract_matches(
        target_text, source_texts, limit=maximum_count,
    ), key=lambda _: -_[1])
    return [text for text, score in matches if minimum_score <= score]


def get_matching_component_types(cve, component_type):
    return cve.keys() if component_type == '' else [component_type]


def get_matching_vendor_names(
        cve, component_type, vendor_name, minimum_score, maximum_count):
    all_vendor_names = get_vendor_names(cve, component_type)
    return select_matches(
        vendor_name, all_vendor_names, minimum_score, maximum_count)


def get_matching_product_names(
        cve, component_type, vendor_name, product_name, minimum_score,
        maximum_count):
    all_product_names = get_product_names(cve, component_type, vendor_name)
    return select_matches(
        product_name, all_product_names, minimum_score, maximum_count)


def get_vendor_names(cve, component_type):
    return cve[component_type].keys()


def get_product_names(cve, component_type, vendor_name):
    return cve[component_type][vendor_name].keys()


def get_product_versions(cve, component_type, vendor_name, product_name):
    product_versions = set()
    for version_pack in cve[component_type][vendor_name][product_name]:
        product_versions.update(version_pack)
    if None in product_versions:
        product_versions.remove(None)
    if '-' in product_versions:
        product_versions.remove('-')
    return product_versions
